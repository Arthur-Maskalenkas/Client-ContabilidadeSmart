"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Categoria {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  slug: String!
}

type CategoriaConnection {
  values: [Categoria]
  groupBy: CategoriaGroupBy
  aggregate: CategoriaAggregator
}

type CategoriaAggregator {
  count: Int
  totalCount: Int
}

type CategoriaGroupBy {
  id: [CategoriaConnectionId]
  created_at: [CategoriaConnectionCreated_at]
  updated_at: [CategoriaConnectionUpdated_at]
  title: [CategoriaConnectionTitle]
  slug: [CategoriaConnectionSlug]
}

type CategoriaConnectionId {
  key: ID
  connection: CategoriaConnection
}

type CategoriaConnectionCreated_at {
  key: DateTime
  connection: CategoriaConnection
}

type CategoriaConnectionUpdated_at {
  key: DateTime
  connection: CategoriaConnection
}

type CategoriaConnectionTitle {
  key: String
  connection: CategoriaConnection
}

type CategoriaConnectionSlug {
  key: String
  connection: CategoriaConnection
}

input CategoriaInput {
  title: String!
  slug: String!
  created_by: ID
  updated_by: ID
}

input editCategoriaInput {
  title: String
  slug: String
  created_by: ID
  updated_by: ID
}

input createCategoriaInput {
  data: CategoriaInput
}

type createCategoriaPayload {
  categoria: Categoria
}

input updateCategoriaInput {
  where: InputID
  data: editCategoriaInput
}

type updateCategoriaPayload {
  categoria: Categoria
}

input deleteCategoriaInput {
  where: InputID
}

type deleteCategoriaPayload {
  categoria: Categoria
}

type Home {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  bannerHome: [ComponentBannerBanner]
}

input HomeInput {
  bannerHome: [ComponentBannerBannerInput!]
  created_by: ID
  updated_by: ID
}

input editHomeInput {
  bannerHome: [editComponentBannerBannerInput]
  created_by: ID
  updated_by: ID
}

input updateHomeInput {
  data: editHomeInput
}

type updateHomePayload {
  home: Home
}

type deleteHomePayload {
  home: Home
}

type MenuOption {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  post: Post
}

type MenuOptionConnection {
  values: [MenuOption]
  groupBy: MenuOptionGroupBy
  aggregate: MenuOptionAggregator
}

type MenuOptionAggregator {
  count: Int
  totalCount: Int
}

type MenuOptionGroupBy {
  id: [MenuOptionConnectionId]
  created_at: [MenuOptionConnectionCreated_at]
  updated_at: [MenuOptionConnectionUpdated_at]
  title: [MenuOptionConnectionTitle]
  post: [MenuOptionConnectionPost]
}

type MenuOptionConnectionId {
  key: ID
  connection: MenuOptionConnection
}

type MenuOptionConnectionCreated_at {
  key: DateTime
  connection: MenuOptionConnection
}

type MenuOptionConnectionUpdated_at {
  key: DateTime
  connection: MenuOptionConnection
}

type MenuOptionConnectionTitle {
  key: String
  connection: MenuOptionConnection
}

type MenuOptionConnectionPost {
  key: ID
  connection: MenuOptionConnection
}

input MenuOptionInput {
  title: String!
  post: ID
  created_by: ID
  updated_by: ID
}

input editMenuOptionInput {
  title: String
  post: ID
  created_by: ID
  updated_by: ID
}

input createMenuOptionInput {
  data: MenuOptionInput
}

type createMenuOptionPayload {
  menuOption: MenuOption
}

input updateMenuOptionInput {
  where: InputID
  data: editMenuOptionInput
}

type updateMenuOptionPayload {
  menuOption: MenuOption
}

input deleteMenuOptionInput {
  where: InputID
}

type deleteMenuOptionPayload {
  menuOption: MenuOption
}

type Menu {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  slug: String!
  menu_options(sort: String, limit: Int, start: Int, where: JSON): [MenuOption!]!
}

type MenuConnection {
  values: [Menu]
  groupBy: MenuGroupBy
  aggregate: MenuAggregator
}

type MenuAggregator {
  count: Int
  totalCount: Int
}

type MenuGroupBy {
  id: [MenuConnectionId]
  created_at: [MenuConnectionCreated_at]
  updated_at: [MenuConnectionUpdated_at]
  title: [MenuConnectionTitle]
  slug: [MenuConnectionSlug]
}

type MenuConnectionId {
  key: ID
  connection: MenuConnection
}

type MenuConnectionCreated_at {
  key: DateTime
  connection: MenuConnection
}

type MenuConnectionUpdated_at {
  key: DateTime
  connection: MenuConnection
}

type MenuConnectionTitle {
  key: String
  connection: MenuConnection
}

type MenuConnectionSlug {
  key: String
  connection: MenuConnection
}

input MenuInput {
  title: String!
  slug: String!
  menu_options: [ID]
  created_by: ID
  updated_by: ID
}

input editMenuInput {
  title: String
  slug: String
  menu_options: [ID]
  created_by: ID
  updated_by: ID
}

input createMenuInput {
  data: MenuInput
}

type createMenuPayload {
  menu: Menu
}

input updateMenuInput {
  where: InputID
  data: editMenuInput
}

type updateMenuPayload {
  menu: Menu
}

input deleteMenuInput {
  where: InputID
}

type deleteMenuPayload {
  menu: Menu
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  text: String!
  capa: UploadFile
  slug: String!
  subtitulo: String
  published_at: DateTime
  categorias(sort: String, limit: Int, start: Int, where: JSON): [Categoria!]!
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag!]!
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  title: [PostConnectionTitle]
  text: [PostConnectionText]
  capa: [PostConnectionCapa]
  slug: [PostConnectionSlug]
  subtitulo: [PostConnectionSubtitulo]
  published_at: [PostConnectionPublished_at]
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionText {
  key: String
  connection: PostConnection
}

type PostConnectionCapa {
  key: ID
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionSubtitulo {
  key: String
  connection: PostConnection
}

type PostConnectionPublished_at {
  key: DateTime
  connection: PostConnection
}

input PostInput {
  title: String!
  text: String!
  capa: ID
  slug: String!
  categorias: [ID]
  tags: [ID]
  subtitulo: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPostInput {
  title: String
  text: String
  capa: ID
  slug: String
  categorias: [ID]
  tags: [ID]
  subtitulo: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

type PostsMaisVistos {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  visitas: Int
  post: Post
}

type PostsMaisVistosConnection {
  values: [PostsMaisVistos]
  groupBy: PostsMaisVistosGroupBy
  aggregate: PostsMaisVistosAggregator
}

type PostsMaisVistosAggregator {
  count: Int
  totalCount: Int
  sum: PostsMaisVistosAggregatorSum
  avg: PostsMaisVistosAggregatorAvg
  min: PostsMaisVistosAggregatorMin
  max: PostsMaisVistosAggregatorMax
}

type PostsMaisVistosAggregatorSum {
  visitas: Float
}

type PostsMaisVistosAggregatorAvg {
  visitas: Float
}

type PostsMaisVistosAggregatorMin {
  visitas: Float
}

type PostsMaisVistosAggregatorMax {
  visitas: Float
}

type PostsMaisVistosGroupBy {
  id: [PostsMaisVistosConnectionId]
  created_at: [PostsMaisVistosConnectionCreated_at]
  updated_at: [PostsMaisVistosConnectionUpdated_at]
  visitas: [PostsMaisVistosConnectionVisitas]
  post: [PostsMaisVistosConnectionPost]
}

type PostsMaisVistosConnectionId {
  key: ID
  connection: PostsMaisVistosConnection
}

type PostsMaisVistosConnectionCreated_at {
  key: DateTime
  connection: PostsMaisVistosConnection
}

type PostsMaisVistosConnectionUpdated_at {
  key: DateTime
  connection: PostsMaisVistosConnection
}

type PostsMaisVistosConnectionVisitas {
  key: Int
  connection: PostsMaisVistosConnection
}

type PostsMaisVistosConnectionPost {
  key: ID
  connection: PostsMaisVistosConnection
}

input PostsMaisVistoInput {
  visitas: Int
  post: ID
  created_by: ID
  updated_by: ID
}

input editPostsMaisVistoInput {
  visitas: Int
  post: ID
  created_by: ID
  updated_by: ID
}

input createPostsMaisVistoInput {
  data: PostsMaisVistoInput
}

type createPostsMaisVistoPayload {
  postsMaisVisto: PostsMaisVistos
}

input updatePostsMaisVistoInput {
  where: InputID
  data: editPostsMaisVistoInput
}

type updatePostsMaisVistoPayload {
  postsMaisVisto: PostsMaisVistos
}

input deletePostsMaisVistoInput {
  where: InputID
}

type deletePostsMaisVistoPayload {
  postsMaisVisto: PostsMaisVistos
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  slug: String!
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  Title: [TagConnectionTitle]
  slug: [TagConnectionSlug]
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionTitle {
  key: String
  connection: TagConnection
}

type TagConnectionSlug {
  key: String
  connection: TagConnection
}

input TagInput {
  Title: String!
  slug: String!
  created_by: ID
  updated_by: ID
}

input editTagInput {
  Title: String
  slug: String
  created_by: ID
  updated_by: ID
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

enum ENUM_WIDGET_PATH {
  categorias
  paginas
}

type Widget {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  path: ENUM_WIDGET_PATH
  categorias(sort: String, limit: Int, start: Int, where: JSON): [Categoria!]!
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post!]!
}

type WidgetConnection {
  values: [Widget]
  groupBy: WidgetGroupBy
  aggregate: WidgetAggregator
}

type WidgetAggregator {
  count: Int
  totalCount: Int
}

type WidgetGroupBy {
  id: [WidgetConnectionId]
  created_at: [WidgetConnectionCreated_at]
  updated_at: [WidgetConnectionUpdated_at]
  title: [WidgetConnectionTitle]
  path: [WidgetConnectionPath]
}

type WidgetConnectionId {
  key: ID
  connection: WidgetConnection
}

type WidgetConnectionCreated_at {
  key: DateTime
  connection: WidgetConnection
}

type WidgetConnectionUpdated_at {
  key: DateTime
  connection: WidgetConnection
}

type WidgetConnectionTitle {
  key: String
  connection: WidgetConnection
}

type WidgetConnectionPath {
  key: String
  connection: WidgetConnection
}

input WidgetInput {
  title: String!
  path: ENUM_WIDGET_PATH
  categorias: [ID]
  posts: [ID]
  created_by: ID
  updated_by: ID
}

input editWidgetInput {
  title: String
  path: ENUM_WIDGET_PATH
  categorias: [ID]
  posts: [ID]
  created_by: ID
  updated_by: ID
}

input createWidgetInput {
  data: WidgetInput
}

type createWidgetPayload {
  widget: Widget
}

input updateWidgetInput {
  where: InputID
  data: editWidgetInput
}

type updateWidgetPayload {
  widget: Widget
}

input deleteWidgetInput {
  where: InputID
}

type deleteWidgetPayload {
  widget: Widget
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_COMPONENTBANNERBANNER_TEXTDIRECTION {
  right
  left
  center
}

type ComponentBannerBanner {
  id: ID!
  title: String!
  img: UploadFile
  titleWithColor: String
  subtitle: String!
  buttonLabel: String!
  buttonLink: String!
  textDirection: ENUM_COMPONENTBANNERBANNER_TEXTDIRECTION
}

input ComponentBannerBannerInput {
  title: String!
  img: ID
  titleWithColor: String
  subtitle: String!
  buttonLabel: String!
  buttonLink: String!
  textDirection: ENUM_COMPONENTBANNERBANNER_TEXTDIRECTION
}

input editComponentBannerBannerInput {
  id: ID
  title: String
  img: ID
  titleWithColor: String
  subtitle: String
  buttonLabel: String
  buttonLink: String
  textDirection: ENUM_COMPONENTBANNERBANNER_TEXTDIRECTION
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Categoria | CategoriaConnection | CategoriaAggregator | CategoriaGroupBy | CategoriaConnectionId | CategoriaConnectionCreated_at | CategoriaConnectionUpdated_at | CategoriaConnectionTitle | CategoriaConnectionSlug | createCategoriaPayload | updateCategoriaPayload | deleteCategoriaPayload | Home | updateHomePayload | deleteHomePayload | MenuOption | MenuOptionConnection | MenuOptionAggregator | MenuOptionGroupBy | MenuOptionConnectionId | MenuOptionConnectionCreated_at | MenuOptionConnectionUpdated_at | MenuOptionConnectionTitle | MenuOptionConnectionPost | createMenuOptionPayload | updateMenuOptionPayload | deleteMenuOptionPayload | Menu | MenuConnection | MenuAggregator | MenuGroupBy | MenuConnectionId | MenuConnectionCreated_at | MenuConnectionUpdated_at | MenuConnectionTitle | MenuConnectionSlug | createMenuPayload | updateMenuPayload | deleteMenuPayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionTitle | PostConnectionText | PostConnectionCapa | PostConnectionSlug | PostConnectionSubtitulo | PostConnectionPublished_at | createPostPayload | updatePostPayload | deletePostPayload | PostsMaisVistos | PostsMaisVistosConnection | PostsMaisVistosAggregator | PostsMaisVistosAggregatorSum | PostsMaisVistosAggregatorAvg | PostsMaisVistosAggregatorMin | PostsMaisVistosAggregatorMax | PostsMaisVistosGroupBy | PostsMaisVistosConnectionId | PostsMaisVistosConnectionCreated_at | PostsMaisVistosConnectionUpdated_at | PostsMaisVistosConnectionVisitas | PostsMaisVistosConnectionPost | createPostsMaisVistoPayload | updatePostsMaisVistoPayload | deletePostsMaisVistoPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_at | TagConnectionUpdated_at | TagConnectionTitle | TagConnectionSlug | createTagPayload | updateTagPayload | deleteTagPayload | Widget | WidgetConnection | WidgetAggregator | WidgetGroupBy | WidgetConnectionId | WidgetConnectionCreated_at | WidgetConnectionUpdated_at | WidgetConnectionTitle | WidgetConnectionPath | createWidgetPayload | updateWidgetPayload | deleteWidgetPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentBannerBanner

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  categoria(id: ID!, publicationState: PublicationState): Categoria
  categorias(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Categoria!]!
  categoriasConnection(sort: String, limit: Int, start: Int, where: JSON): CategoriaConnection
  home(publicationState: PublicationState): Home
  menuOption(id: ID!, publicationState: PublicationState): MenuOption
  menuOptions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [MenuOption!]!
  menuOptionsConnection(sort: String, limit: Int, start: Int, where: JSON): MenuOptionConnection
  menu(id: ID!, publicationState: PublicationState): Menu
  menus(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Menu!]!
  menusConnection(sort: String, limit: Int, start: Int, where: JSON): MenuConnection
  post(id: ID!, publicationState: PublicationState): Post
  posts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Post!]!
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  postsMaisVisto(id: ID!, publicationState: PublicationState): PostsMaisVistos
  postsMaisVistos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PostsMaisVistos!]!
  postsMaisVistosConnection(sort: String, limit: Int, start: Int, where: JSON): PostsMaisVistosConnection
  tag(id: ID!, publicationState: PublicationState): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Tag!]!
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  widget(id: ID!, publicationState: PublicationState): Widget
  widgets(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Widget!]!
  widgetsConnection(sort: String, limit: Int, start: Int, where: JSON): WidgetConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createCategoria(input: createCategoriaInput): createCategoriaPayload
  updateCategoria(input: updateCategoriaInput): updateCategoriaPayload
  deleteCategoria(input: deleteCategoriaInput): deleteCategoriaPayload
  updateHome(input: updateHomeInput): updateHomePayload
  deleteHome: deleteHomePayload
  createMenuOption(input: createMenuOptionInput): createMenuOptionPayload
  updateMenuOption(input: updateMenuOptionInput): updateMenuOptionPayload
  deleteMenuOption(input: deleteMenuOptionInput): deleteMenuOptionPayload
  createMenu(input: createMenuInput): createMenuPayload
  updateMenu(input: updateMenuInput): updateMenuPayload
  deleteMenu(input: deleteMenuInput): deleteMenuPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createPostsMaisVisto(input: createPostsMaisVistoInput): createPostsMaisVistoPayload
  updatePostsMaisVisto(input: updatePostsMaisVistoInput): updatePostsMaisVistoPayload
  deletePostsMaisVisto(input: deletePostsMaisVistoInput): deletePostsMaisVistoPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  createWidget(input: createWidgetInput): createWidgetPayload
  updateWidget(input: updateWidgetInput): updateWidgetPayload
  deleteWidget(input: deleteWidgetInput): deleteWidgetPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
